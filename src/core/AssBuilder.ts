import Dialogue from './Entities/Dialogue';
import AEffect from  '../AEffect';

const headerTemplate = `[Script Info]\r\n\
; Script generated by AEffect\r\n\
; https://github.com/Last-Order/AEffect\r\n\
; ${new Date()}\r\n\
ScriptType: v4.00+\r\n\
WrapStyle: 0\r\n\
ScaledBorderAndShadow: yes\r\n\
YCbCr Matrix: None\r\n\
`;

class AssBuilder {
    /**
     * @param AEffect
     */
    static build(AEffect: AEffect) {
        let ass = headerTemplate;
        if (AEffect.metaInfo.resolution.width && AEffect.metaInfo.resolution.height) {
            ass += `PlayResX: ${AEffect.metaInfo.resolution.width}\r\n`;
            ass += `PlayResY: ${AEffect.metaInfo.resolution.height}\r\n`;
        }
        // tslint:disable-next-line:max-line-length
        ass += '\r\n[V4+ Styles]\r\nFormat: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\r\n';

        // 拼接样式
        for (const key of Object.keys(AEffect.styles)) {
            ass += `${AEffect.styles[key].toString()}\r\n`;
        }

        // tslint:disable-next-line:max-line-length
        ass += '\r\n[Events]\r\nFormat: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\r\n';

        // 拼接对话行
        for (const line of AEffect.dialogs.concat(AEffect.generatedDialogs)) {
            ass += `${line}\r\n`;
        }
        return ass;
    }
}

export default AssBuilder;
